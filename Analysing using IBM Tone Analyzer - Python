# -*- coding: utf-8 -*-
"""ToneAnalyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    ****
"""

!pip install --upgrade watson-developer-cloud
!pip install -U -q PyDrive

import json
import pandas as pd
import csv
import matplotlib.pyplot as plt
from watson_developer_cloud import ToneAnalyzerV3
from pandas.io.json import json_normalize
from math import pi
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from google.colab import files
from oauth2client.client import GoogleCredentials


helen = pd.DataFrame.from_csv('helen_zille_full.csv', sep='\t')
#function to clean up the text extracted
def clean_text(df, text_field):
  df[text_field] = df[text_field].str.lower()
  df[text_field] = df[text_field].str.replace(r'^[0-9]{1,2,3,4,5}$', "")
  df[text_field] = df[text_field].str.replace('[\U0001F602-\U0001F64F]', "") #emoticons remover
  df[text_field] = df[text_field].str.replace('[\U0001F1E0-\U0001F1FF]', "") #flag remover
  df[text_field] = df[text_field].str.replace(r'(https|http)?:\/\/(\w|\.|\/|\?|\=|\&|\%)*\b', "") #url remover
  df[text_field] = df[text_field].str.replace("  ","")
  df[text_field] = df[text_field].str.replace("[\-_~*'()]","")
  df[text_field] = df[text_field].str.replace("--","")
  return df[text_field]

helen['Tweets'] = pd.Series(clean_text(helen, 'Tweets'))
helen_str = helen['Tweets'].str.cat(sep='.')

#reducing the size of string because of Tone Analyzer API limits
helen_limit= (helen_str[0:130000])

tone_analyzer = ToneAnalyzerV3(
    version='2017-09-21',
    iam_apikey='****',
    url='****'
)

#running sentiment and tone analysis
tone_analysis = tone_analyzer.tone(
    {'text': helen_limit},
    'application/json'
).get_result()

#converting to dataframe
helen_analysis = json_normalize(data=tone_analysis['sentences_tone'], record_path='tones')

helen_count = helen_analysis.groupby('tone_id').agg('count')

#reseting index
helen_count = helen_count.reset_index(drop=False)

#creating radar chart and plotting values
keys = list(helen_count['tone_id'])
values = list(helen_count['score'])
N = len(keys)
x_as = [n / float(N) * 2 * pi for n in range(N)]
values += values[:1]
x_as += x_as[:1]
plt.rc('axes', linewidth=0.5, edgecolor="#216ef0") #colour of axes
ax = plt.subplot(111, polar=True) #polar plot
ax.set_theta_offset(pi / 2)
ax.set_theta_direction(-1)
ax.set_rlabel_position(0) #setting position of y-labels
# Color and linestyle of grid
ax.xaxis.grid(True, color="#040101", linestyle='solid', linewidth=0.5)
ax.yaxis.grid(True, color="#040101", linestyle='solid', linewidth=0.5)
plt.xticks(x_as[:-1], []) # Set number of radial axes and remove labels
# yticks
plt.yticks([8, 16, 24, 32, 40], ["8", "16", "24", "32", "40"])


# Plotting data
ax.plot(x_as, values, linewidth=0, linestyle='solid', zorder=3)
ax.fill(x_as, values, 'b', alpha=0.3)
plt.ylim(0, 45) #size of axes

# ensuring the labels fit the plot
for i in range(N):
    angle_rad = i / float(N) * 2 * pi

    if angle_rad == 0:
        ha, distance_ax = "center", 10
    elif 0 < angle_rad < pi:
        ha, distance_ax = "left", 1
    elif angle_rad == pi:
        ha, distance_ax = "center", 1
    else:
        ha, distance_ax = "right", 1

    ax.text(angle_rad, 45 + distance_ax, keys[i], size=10, horizontalalignment=ha, verticalalignment="center")


# Show polar plot
plt.show()

#saving helen dataframe to my Google Drive
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
helen = helen.to_csv('helen_text.csv', sep = '\t')
file = drive.CreateFile({'parents':[{u'id':'****'}]})
file.SetContentFile('helen_text.csv')
file.Upload()
